@page "/diagnosticos/chatbot"

@using Refit
@using WebClientBlazor.Resources
@using WebClientBlazor.Service
@using Api.Gateway.Models.Diagnosticos.DTOs
@using Api.Gateway.Models.Diagnosticos.Commands
@inject NavigationManager NavigationManager

<div class="chatbot m-auto h-100 rounded overflow-hidden d-flex flex-column mt-3">
    <div class="chatbot__header p-3 text-white">
        <h2 class="h3 text-white m-0">CLL - Chatbot</h2>
    </div>
    <div class="chatbot__messages py-2 flex-grow-1" style="overflow-y: scroll">
        <Mensaje mensaje=@(new Models.Mensaje() { Contenido = "Bienvenido!", EsPregunta = true }) parent=@this />

        @foreach (var mensaje in Mensajes)
        {
            if (mensaje.Opciones?.Count > 0)
            {
                <Mensaje mensaje=mensaje alElegirOpcion=ElegirOpcionHandler />
            }
            else
            {
                <Mensaje mensaje=mensaje />
            }
        }
        @if (noHayMasPreguntas)
        {
            <Mensaje mensaje=@(new Models.Mensaje() { Contenido = "Muchas gracias por responder!", EsPregunta = true }) parent=@this />
        }
    </div>
    <div class="chatbot__footer d-flex flex-row p-2 align-items-center">
        <input class="form-control" placeholder="Ingrese un dato" @bind=@DatoIngresado @oninput="(e => DatoIngresado = (string)e.Value)" @onkeydown=EnterSubmit>
        <button class="chatbot__send btn btn-outline-secondary rounded-circle ms-2 d-flex align-items-center" @onclick=ClickSubmit>
            <img src="../../img/send.png" class="w-100" />
        </button>
    </div>
</div>

@if (noHayMasPreguntas)
{
    <input type="button" class="btn btn-primary w-25 mx-auto" value="Ver resultados" @onclick=GuardarDiagnostico />
}

@code {
    private static int iter = -1;

    private static int preguntasCount = 1;

    private bool noHayMasPreguntas;

    public List<Models.Mensaje> Mensajes { get; set; } = new();

    public string DatoIngresado { get; set; }

    public static List<Models.PreguntaRespuesta> PreguntasRespuestas { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var refitSettings = new RefitSettings(new NewtonsoftJsonContentSerializer());
        var webClientApi = RestService.For<IWebClientService>(ApiUrls.BaseUrl, refitSettings);

        var Especialidades = await webClientApi.GetEspecialidades(AuthUser.AccessToken);

        var Preguntas = await webClientApi.GetPreguntasEsp(AuthUser.AccessToken, 4, 30);

        var IdEspecialidad = 4;

        PreguntasRespuestas = new();

        PreguntasRespuestas.Add(new PreguntaRespuesta(
            "Elija una especialidad",
            Especialidades.Items.Select(x => new OpcionDto() { Valor = x.Nombre }).ToList(),
            "")
        );

        PreguntasRespuestas.AddRange(Preguntas.Items.ToList().Select(x => new PreguntaRespuesta
        {
            IdEspecialidad = IdEspecialidad,
            IdPregunta = x.Id,
            Opciones = x.Opciones.ToList(),
            Pregunta = x.Contenido,
            Respuesta = null
        }).ToList());

        preguntasCount = PreguntasRespuestas.Count();
    }

    public void ElegirOpcionHandler(Models.Mensaje mensaje)
    {
        EnviarDato(mensaje.OpcionElegida);
        mensaje.Opciones = null;
    }

    public void AgregarSgtePregunta()
    {
        if (++iter < preguntasCount)
        {
            var pregunta = PreguntasRespuestas[iter];
            var opciones = pregunta.Opciones.Select(x => x.Valor).ToList();
            Mensajes.Add(new Models.Mensaje() { Contenido = pregunta.Pregunta, EsPregunta = true, Opciones = opciones });

            StateHasChanged();
        }
        else
        {
            noHayMasPreguntas = true;
            iter = -1;
        }
    }

    public void EnterSubmit(KeyboardEventArgs args)
    {
        if (args.Code == "Enter" || args.Code == "NumpadEnter")
            EnviarDato(DatoIngresado);
    }

    public void ClickSubmit()
    {
        EnviarDato(DatoIngresado);
    }

    public void EnviarDato(string dato)
    {
        Mensajes.Add(new Models.Mensaje() { Contenido = dato, EsPregunta = false });
        PreguntasRespuestas[iter].Respuesta = dato;
        DatoIngresado = null;

        AgregarSgtePregunta();
    }

    public async Task GuardarDiagnostico()
    {
        var refitSettings = new RefitSettings(new NewtonsoftJsonContentSerializer());
        var webClientApi = RestService.For<IWebClientService>(ApiUrls.BaseUrl, refitSettings);

        var paciente = await webClientApi.GetPacientes(AuthUser.AccessToken, AuthUser.UserId);
        //var pacienteId = paciente.Items.FirstOrDefault().Id;
        var pacienteId = 11;

        var diagnosticoCreate = new DiagnosticoCreateCommand
        {
            Especialidad_Id = 4,
            Paciente_Id = pacienteId,
            DetallesDiagnostico = PreguntasRespuestas.Select(x => new DetalleDiagnosticoCommand {
                Pregunta_Id = x.IdPregunta,
                Respuesta = x.Respuesta
            }).ToList()
        };

        await webClientApi.CreateDiagnostico(diagnosticoCreate, AuthUser.AccessToken);

        NavigationManager.NavigateTo("http://localhost:10011/diagnosticos/resultados");
    }
}